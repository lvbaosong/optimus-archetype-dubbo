spring.aop.auto=true
# Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).
spring.aop.proxy-target-class=true
# 应用程序多环境支持: dev、stag、prod（对应文件 application-{profile}.properties设置）
spring.profiles.active=dev
server.port=8088
spring.application.name=${rootArtifactId}
# logback日志配置,日志环境类型，服务名，级别
log.env.profile=dev
log.env.module=${rootArtifactId}
log.env.logger.level=info
#服务上下文配置，springboot 2.x推荐写法
server.servlet.context-path=/${rootArtifactId}
# mybatis-plus 配置
mybatis-plus.mapper-locations=classpath:/mapper/*Mapper.xml
mybatis-plus.configuration.map-underscore-to-camel-case=true
# 逻辑删除配置
mybatis-plus.global-config.logic-delete-value=1
mybatis-plus.global-config.logic-not-delete-value=0
# id自动生成策略
mybatis-plus.global-config.db-config.id-type=uuid

########################## dubbo 配置 ###############################

# Service version
demo.service.version = 1.0.0

# Base packages to scan Dubbo Components (e.g @Service , @Reference)
dubbo.scan.basePackages  = ${package}.service.impl

# Dubbo Config properties
# ApplicationConfig Bean
dubbo.application.id = ${rootArtifactId}
dubbo.application.name = ${rootArtifactId}

# ProtocolConfig Bean
dubbo.protocol.id = dubbo
dubbo.protocol.name = dubbo
dubbo.protocol.port = 20880
dubbo.provider.timeout = 5000

# 自定义异常处理过滤器，要用-exception删除默认的过滤器
dubbo.provider.filter=exceptionFilter,-exception

## RegistryConfig Bean
dubbo.registry.id = my-registry
dubbo.registry.address = zookeeper://127.0.0.1:2181

dubbo.consumer.check = false
dubbo.registry.check = false
########################## dubbo 配置 ###############################


########################## SBA 配置 ###############################
spring.security.user.name=dubbo-demo
spring.security.user.password=deepexi@2019
spring.security.user.roles=ENDPOINT_ADMIN

# springboot admin client端配置信息
spring.boot.admin.client.url=http://localhost:8769
# 对应server端的账号密码，不配置就监控不到这个client
spring.boot.admin.client.username=admin
spring.boot.admin.client.password=deepexi
# 配置发送到SBA Server的SBA Client的端点安全密码
spring.boot.admin.client.instance.metadata.user.name=${spring.security.user.name}
spring.boot.admin.client.instance.metadata.user.password=${spring.security.user.password}
spring.boot.admin.client.instance.metadata.user.roles=${spring.security.user.roles}

# spring.boot.admin.client.instance.service-base-url=http://

# 监控所有端点，其中health和status是必须监控的
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=configprops

# 排除对配置信息的监控，每次浏览这个节点的时候，
# 数据库的链接就一直释放不掉，最后导致超时，因为配置信息的监控也不重要，
# 就不再监控这个节点，以下为可监控的endpoint。可以根据需要有选择的进行监控。
# - health,status,env,metrics,dump,jolokia,info,
# configprops,trace,logfile,refresh,flyway,
# liquibase,heapdump,loggers,auditevents,hystrix.stream,activiti
# info信息会显示到SBA的server端，这里取的是maven中的数据
info.version=@project.version@
info.groupId=@project.groupId@
info.artifactId=@project.artifactId@